%% Task 1

% Load train data 
load train;

% Run the data through Myquantizer, where Vp = 1 and bits = 14
[quantizedSignal,varLin,varSat,SNqR] = MyQuantizer2(y,1,14);

% Transform the quantized signal to bitstream
[bitStream] = MyGraycode2(quantizedSignal,1,14);

% Deciding the input parameters
Es = 2;
M = 4;

% Run MyMPAM function, expected output is a rectangular pulse
transmitSignal = MyMPAM(bitStream,M,Es);
figure(1);
plot(transmitSignal(1:1000));
title("Rectangular pulses generated by M-PAM");
xlabel("Sample time [s]");
ylabel("Amplitude [V]");

%% Task 2
% Demodulate the signal
receivedSignal = transmitSignal;
transmittedBitstream = bitStream;
[estimatedBitstream, BER] = DemodulateMPAM(receivedSignal,M,Es,transmittedBitstream, 0);

disp("Bit Error Rate for M = 4, Es = 2 and no noise added:\n");
disp(BER);

%% Task 3

% Add noise to the M-ary analog signal
noiseVariance = 0.1;
receivedSignal_noisy = MyAWGNchannel(transmitSignal,noiseVariance);
disp("Noisy signal with variance = 0.1:\n");
figure(2);
plot(receivedSignal_noisy(1:1000))
title("Rectangular noisy pulses generated by M-PAM");
xlabel("Sample time [s]");
ylabel("Amplitude [V]");
%% Task 4

% Plot BER as a function of variance/s and M equal 2 and 8 without the
% mathced filter.

% Modulation order
M = [2, 8];    
% Noise variance in dB
variances = logspace(-6,0.6,100); 

BER = {};
% Modulate bits using PAM
for m = 1:length(M)
    tx_signal = MyMPAM(bitStream, M(m), Es);
    % Simulate channel noise for different noise variances
    for i = 1:length(variances)
        % Add noise
        rx_signal = MyAWGNchannel(tx_signal, variances(i));
        % Demodulate received signal
        [estimatedBitstream, BER_sample] = DemodulateMPAM(rx_signal, M(m), Es, bitStream, 0);
        % Save BER values in cell of arrays
        BER{m}(i) = BER_sample;
    end
end

% Plot BER vs. noise variance
figure;
semilogy(variances, BER{1}, 'o-', 'LineWidth', 2);
hold on;
semilogy(variances, BER{2}, 's-', 'LineWidth', 2);
grid on;
xlabel('Noise Variance (dB)');
ylabel('Bit Error Rate (BER)');
title('BER vs. Noise Variance');
legend('2PAM', '8PAM');

%%
%Task 6

% Plot BER as a function of variance/s and M equal 2 and 8 with the matched
% filter.

% Modulation order
M = [2, 8];    
% Noise variance in dB
variances = logspace(-6,1.2,100); 

BER = {};
% Modulate bits using PAM
for m = 1:length(M)
    tx_signal = MyMPAM(bitStream, M(m), Es);
    % Simulate channel noise for different noise variances
    for i = 1:length(variances)
        % Add noise
        rx_signal = MyAWGNchannel(tx_signal, variances(i));
        % Demodulate received signal
        [estimatedBitstream, BER_sample] = DemodulateMPAM(rx_signal, M(m), Es, bitStream, 1);
        % Save BER values in cell of arrays
        BER{m}(i) = BER_sample;
    end
end

% Plot BER vs. noise variance
figure;
semilogy(variances, BER{1}, 'o-', 'LineWidth', 2);
hold on;
semilogy(variances, BER{2}, 's-', 'LineWidth', 2);
grid on;
xlabel('Noise Variance (dB)');
ylabel('Bit Error Rate (BER)');
title('BER vs. Noise Variance and matched filter');
legend('2PAM', '8PAM');
